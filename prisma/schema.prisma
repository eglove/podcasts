generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Log {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  level     String
  message   String
  timestamp DateTime
}

model Podcast {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  feedUrl          String   @unique
  title            String
  isSerial         Boolean
  youtubeChannelId String?

  subscribers     User[]
  podcastEpisodes PodcastEpisode[]
}

model PodcastEpisode {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String   @unique
  title     String
  published DateTime

  podcastId           String
  podcast             Podcast              @relation(fields: [podcastId], references: [id])
  userPodcastEpisodes UserPodcastEpisode[]
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String

  subscriptions       Podcast[]
  userPodcastEpisodes UserPodcastEpisode[]
}

model UserPodcastEpisode {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seen      Boolean  @default(false)

  userId           String
  user             User           @relation(fields: [userId], references: [id])
  podcastEpisodeId String
  podcastEpisode   PodcastEpisode @relation(fields: [podcastEpisodeId], references: [id])

  @@unique([userId, podcastEpisodeId])
}
